
from tkinter import *
import random
#size field
Width = 1000;
Height = 300;

#size pads
Pad_width = 10;
Pad_height = 100;

Ball_radius = 30

right_line_distance = Width - Pad_width
# Score Players
PLAYER_1_SCORE = 0
PLAYER_2_SCORE = 0
#Change move ball on ver and hor
Ball_x_change = 20
Ball_y_change = 0
time_update = 50
pad_speed_human = 0
pad_speed = 20
# coefficient speed ball
BALL_SPEED_UP = 1.05
# Максимальная скорость мяча
BALL_MAX_SPEED = 40

ball_center = 0
#object class "Tk"
root = Tk()
root.title("Ping-Pong")
#root.mainloop()
#create field
c = Canvas(
    root, 
    width = Width, 
    height = Height, 
    background = "Green")
c.pack()

#create design(create write lines and center ellipse)
#center line
c.create_line(Width/2,
              0, Width/2, 
            Height, fill = "white")
#left line
c.create_line(Pad_width, 
              0,Pad_width, 
              Height, 
              fill = "white")
#right line
c.create_line(Width-Pad_width, 
              0, 
              Width-Pad_width, 
              Height, 
              fill = "white")
#center circle 
c.create_oval(Width/2 - 30, 
              Height/2 - 30, 
              Width/2 + 30, 
              Height/2 + 30, 
              width = 2,
              fill = "Green")
#create pads
#left pad
left_pad = c.create_line(
                   Pad_width/2, 
                   0, 
                   Pad_width/2, 
                   Pad_height, 
                   width=Pad_width,
                   fill = "Red"
                   )
#right pad
right_pad = c.create_line(Width-Pad_width/2, 
                          0, 
                          Width-Pad_width/2, 
                          Pad_height, 
                          width=Pad_width,
                          fill = "Blue"
                          )
#Ball 
Ball = c.create_oval(Width/2 - Ball_radius/2,
              Height/2 - Ball_radius/2, 
              Width/2 + Ball_radius/2, 
              Height/2 + Ball_radius/2, 
              fill = "Orange")

p_1_text = c.create_text(Width-Width/6, Pad_height/4,
                         text=PLAYER_1_SCORE,
                         font="Arial 20",
                         fill="white")
 
p_2_text = c.create_text(Width/6, Pad_height/4,
                          text=PLAYER_2_SCORE,
                          font="Arial 20",
                          fill="white")
INITIAL_SPEED = 20
BALL_X_SPEED = INITIAL_SPEED
BALL_Y_SPEED = INITIAL_SPEED



#move ball
def move_ball():
    c.move(Ball, 
           Ball_x_change, 
           Ball_y_change)
    
#set global variables speed move pads
PAD_SPEED = 20
# speed move left pad
LEFT_PAD_SPEED = 0
# speed move right pad
RIGHT_PAD_SPEED = 0
 
def move_bot():
    #c.coords(right_pad)[2]=c.coords(Ball)[2]  
    #.move(right_pad, 0, c.coords.)
    #c.move(right_pad, 0, c.coords(right_pad)[2]-c.coords(Ball)[2])

    # if the racket goes over the area, return to the center 
    if c.coords(right_pad)[1] < 0:
       c.move(right_pad, 0, -c.coords(right_pad)[1])
    elif c.coords(right_pad)[3] > Height:
       c.move(right_pad, 0, Height - c.coords(right_pad)[3])

# Function move pad
def move_pad_human():
    # move pad with setted speed
    c.move(left_pad, 0, LEFT_PAD_SPEED)
    # if pad is exiting on space, set in space
    if c.coords(left_pad)[1] < 0:
       c.move(left_pad, 0, -c.coords(left_pad)[1])
    elif c.coords(left_pad)[3] > Height:
       c.move(left_pad, 0, Height - c.coords(left_pad)[3])
#main fuction
def main():
    move_ball()
    move_pad_human()
    move_bot()
    #recurse every 30 ms
    root.after(30, main)
#set focus on Canvas, for reaction on key down
c.focus_set()
#Function processing keys down
def movement_handler(event):
    global LEFT_PAD_SPEED, RIGHT_PAD_SPEED
    if event.keysym == "w":
        LEFT_PAD_SPEED = -PAD_SPEED
    elif event.keysym == "s":
        LEFT_PAD_SPEED = PAD_SPEED
    
 
# add Canvas this function
c.bind("<KeyPress>", movement_handler)

def bounce(action):
    global BALL_X_SPEED, BALL_Y_SPEED
    # kick pad
    if action == "strike":
        BALL_Y_SPEED = random.randrange(-10, 10)
        if abs(BALL_X_SPEED) < BALL_MAX_SPEED:
            BALL_X_SPEED *= -BALL_SPEED_UP
        else:
            BALL_X_SPEED = -BALL_X_SPEED
    else:
        BALL_Y_SPEED = -BALL_Y_SPEED 
#Function for reaction on key up
def stop_pad(event):
    global LEFT_PAD_SPEED, RIGHT_PAD_SPEED
    if event.keysym in "ws":
        LEFT_PAD_SPEED = 0
    
 

def move_ball():
    # Define coordinates ball and it center
    ball_left, ball_top, ball_right, ball_bot = c.coords(Ball)
    ball_center = (ball_top + ball_bot) / 2
 
    # vertical rebound
    # if we are far from vertical lines, move the ball
    if ball_right + BALL_X_SPEED < right_line_distance and \
            ball_left + BALL_X_SPEED > Pad_width:
        #move bot(set speed ball for right pad)
        c.move(right_pad, 
           0, 
           BALL_Y_SPEED)
        c.move(Ball, BALL_X_SPEED, BALL_Y_SPEED)
    # if ball touch itself right or left side border line field
    elif ball_right == right_line_distance or ball_left == Pad_width:
        #Check side touch
        if ball_right > Width / 2:
            #if right, then compare position center ball with position right pad
            #if ball touch pad we are doing rebound
            if c.coords(right_pad)[1] < ball_center < c.coords(right_pad)[3]:
                bounce("strike")
            else:
                # else player pass and respawn ball
                update_score("left")
                spawn_ball()
        else:
            # too, but for left border
            if c.coords(left_pad)[1] < ball_center < c.coords(left_pad)[3]:
                bounce("strike")
            else:
                update_score("right")
                spawn_ball()
    # check on get out from player field 
    # if yes, put it to the border 
   
    else:
        if ball_right > Width / 2:
            c.move(Ball, right_line_distance-ball_right, BALL_Y_SPEED)
        else:
            c.move(Ball, -ball_left+Pad_width, BALL_Y_SPEED)
    # horizontal rebound
    if ball_top + BALL_Y_SPEED < 0 or ball_bot + BALL_Y_SPEED > Height:
        bounce("ricochet")
    
def spawn_ball():
    global BALL_X_SPEED
    # ball in center
    c.coords(Ball, Width/2-Ball_radius/2,
             Height/2-Ball_radius/2,
             Width/2+Ball_radius/2,
             Height/2+Ball_radius/2)
    #change direction in the losing side and speed ball defould
    #
    BALL_X_SPEED = -(BALL_X_SPEED * -INITIAL_SPEED) / abs(BALL_X_SPEED)

def update_score(player):
    global PLAYER_1_SCORE, PLAYER_2_SCORE
    if player == "right":
        PLAYER_1_SCORE += 1
        c.itemconfig(p_1_text, text=PLAYER_1_SCORE)
    else:
        PLAYER_2_SCORE += 1
        c.itemconfig(p_2_text, text=PLAYER_2_SCORE)

c.bind("<KeyRelease>", stop_pad)

# start move
main()
 
# start window
root.mainloop()
